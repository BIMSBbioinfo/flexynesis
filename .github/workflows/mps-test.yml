name: Test MPS on macOS for flexynesis

on:
  push:
    paths:
      - "flexynesis/**"
      - "pyproject.toml"
      - ".github/workflows/mps-test.yml"
  pull_request:
    paths:
      - "flexynesis/**"
      - "pyproject.toml"
      - ".github/workflows/mps-test.yml"

jobs:
  # A single job to test MPS
  test-mps-on-macos:
    name: Test MPS on Apple Silicon

    # This is the most important line: it tells GitHub to use a
    # virtual machine with an Apple Silicon chip.
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # This new step will print the CPU brand.
      - name: Check CPU Type
        run: sysctl -n machdep.cpu.brand_string

      # Set up a Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install package and its dependencies
      - name: Install package from source
        run: pip install .

      # This is the minimal test. It runs a single line of Python to
      # confirm that the MPS device is available and that a core
      # flexynesis class can be initialized with it.
      - name: Run minimal MPS check
        run: |
          python -c "import torch; import flexynesis; import pandas as pd; \
          print('MPS available:', torch.backends.mps.is_available()); \
          if not torch.backends.mps.is_available(): \
              raise SystemExit('ERROR: MPS backend not available on this runner!'); \
          dummy_features = pd.DataFrame([[1, 2]]); \
          dummy_labels = pd.DataFrame([0]); \
          importer = flexynesis.data.DataImporter(data=[dummy_features], y=dummy_labels, device='mps'); \
          print('Success: Successfully initialized DataImporter with MPS device.')"